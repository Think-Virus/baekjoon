# 성냥개비는 숫자를 나타내기에 아주 이상적인 도구이다. 보통 십진수를 성냥개비로 표현하는 방법은 다음과 같다.
# 성냥개비의 개수가 주어졌을 때, 성냥개비를 모두 사용해서 만들 수 있는 가장 작은 수와 큰 수를 찾는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 테스트 케이스의 개수가 주어진다. 테스트 케이스는 최대 100개 이다. 각 테스트 케이스는 한 줄로 이루어져 있고, 성냥개비의 개수 n이 주어진다. (2 ≤ n ≤ 100)
# 출력
# 각 테스트 케이스에 대해서 입력으로 주어진 성냥개비를 모두 사용해서 만들 수 있는 가장 작은 수와 가장 큰 수를 출력한다. 두 숫자는 모두 양수이어야 하고, 숫자는 0으로 시작할 수 없다.

"""
숫자 당 성냥개비 갯수
1 -> 2
2 -> 5
3 -> 5
4 -> 4
5 -> 5
6 -> 6
7 -> 3
8 -> 7
9 -> 6
0 -> 6

In :
4
3
6
7
15

Out :
7 7
6 111
8 711
108 7111111

큰 값을 만들 때는 첫 글자로 7이 가장 효율이 좋고 나머지는 1로 채우는 것이 좋음, 만약 1로 하기 전에 남는다면 그 값이 7보다 클 경우 4보다 앞에, 아니면 7보다 뒤로 설정!
작은 값은 가장 많은 성냥(8)과 0을 이용하는 것이 좋을듯

어차피 모든 숫자는 2와 3으로 만들 수 있음..
가장 작은 숫자를 만들 때는 8 -> 7이 좋고
가장 큰 숫자를 만들 떄는 1 -> 2이 좋음
"""

"""
check_2 = amount // 2 # 2의 개수
8은 성냥 7개 -> 즉 check_2가 3개 +1개가 1개는 있어야 함
만약 개수를 충족하지 않는다면?
다음 우선선위는 첫 자리가 아니라면 0, 첫 자리라면 6 -> check_2가 3개 필요
다음은 2 -> check_2가 2개 +1개 필요    
"""

"""
정답 코드 확인 (작은 값)
1. 우선 성냥이 2개부터 10개일 때를 직접 구해보면 ans와 같이 나오는 것을 알 수 있다.
2. 10보다 작은 경우는 그대로 answer_min으로 출력한다.
3. 그렇지 않은 경우에는 자릿수를 제일 적게 사용하기 위해 가장 많은 7개의 성냥을 사용하는 8로 수를 채운다.
4. 7로 나누어 떨어지지 않는 경우를 예외로 처리한다.
"""

import sys

n_l = []
for _ in range(int(sys.stdin.readline())) :
    n_l.append(int(sys.stdin.readline()))

for i in n_l :
    # 작은 수 구하기
    ans = [0, 0, 1, 7, 4, 2, 6, 8, 10, 18, 22]
    n = i
    if n <= 10:
        min_val = ans[n]
    else:
        min_val = ''
        while n > 0:
            n -= 7
            if n >= 0:
                min_val += '8'
            else:
                n += 7
                break
        small = {2: '1', 5: '2', 6: '6'}
        if n in small:
            min_val = small[n] + min_val
        else:
            if n == 1:
                min_val = '10' + min_val[1:] # 성냥이 1이 남았으면 ...88로 되어 있는 것에서 하나 빼서 성냥 갯수가 8개 남은 것이므로 처리하여 10으로 만듦
            elif n == 3:
                min_val = '200' + min_val[2:] # 성냥이 3이 남았으면 ...88로 되어 있는 것에서 두개 빼서 성냥 갯수가 17개 남은 것이므로 처리하여 200으로 만듦
            elif n == 4:
                min_val = '20' + min_val[1:] # 성냥이 4이 남았으면 ...88로 되어 있는 것에서 하나 빼서 성냥 갯수가 11개 남은 것이므로 처리하여 10으로 만듦

    # 최대값 찾기
    max_amount = i
    check_2 = max_amount // 2
    if max_amount % 2 == 0 :
        max_val = '1' * check_2
    else:
        max_val = '7'*(max_amount % 2) + '1' * (check_2-1)

    print(min_val,max_val)