# 대한 어린이집에 올해 입학한 어린이들이 놀이터에 한 줄로 서있다.
# 모든 어린이들에게는 입학할 때 주어진 번호가 있고 모두 옷에 번호표를 달고 있다.
# 그런데 어린이들은 아직 번호 순서대로 줄을 잘 서지 못하므로 선생님이 다음과 같은 방법을 사용해서 번호순서대로 줄을 세우려고 한다.

# 방법: 줄 서있는 어린이 중 한 명을 선택하여 제일 앞이나 제일 뒤로 보낸다.
# 위의 방법을 사용할 때 어린이가 이동해서 빈자리가 생기는 경우에는 빈자리의 뒤에 있는 어린이들이 한 걸음씩 앞으로 걸어와서 빈자리를 메꾼다.

# 예를 들어, 5명의 어린이들에게 1부터 5까지의 번호가 주어져 있고, 다음과 같은 순서로 줄 서있다고 하자.
# 5 2 4 1 3
# 위 방법을 이용해서 다음과 같이 번호순서대로 줄을 세울 수 있다.
# 1번 어린이를 제일 앞으로 보낸다. (5 2 4 1 3 → 1 5 2 4 3)
# 4번 어린이를 제일 뒤로 보낸다. (1 5 2 4 3 → 1 5 2 3 4)
# 5번 어린이를 제일 뒤로 보낸다. (1 5 2 3 4 → 1 2 3 4 5)

# 위의 예에서는 세 명의 어린이를 제일 앞이나 제일 뒤로 보내 번호순서대로 줄을 세웠다.
# 그리고 두 명 이하의 어린이를 제일 앞이나 제일 뒤로 보내는 방법으로는 번호순서대로 줄을 세울 수 없다.
# 그러므로 이 경우에는 최소한 세 명의 어린이를 이동하여야 번호순서대로 줄을 세울 수 있다.
# 이 문제는 처음에 줄서있는 상태에서 위 방법을 이용해서 번호순서대로 줄을 세울 때 앞이나 뒤로 보내는 어린이 수의 최솟값을 찾는 것이다.


"""
모르겠어서 정답코드 확인 LIS(가장 긴 증가수열) 알고리즘 알면 좋

제일 앞이나 제일 뒤로 보내는 어린이수의 최솟값을 구하기 위해서
몇명의 어린이가 번호에 맞게 서있는지 구하고 전체 어린이 수에서 뺌으로써 구할 수 있다.

예로 살펴보면,
입력값을 nums에 저장하고, 인덱스를 맞추기 위해 처음에 0을 삽입해주면
nums = [0,5,2,4,1,3]이 된다.

그리고 각 번호의 어린이가 몇 번째 자리에 있는지를 나타내기 위해 positions 리스트를 만든다
positions = [0,4,2,5,3,1], 이 리스트의 의미는 해당 인덱스의 숫자가 몇번째 자리에 있는가 이다.
즉, 포지션 리스트의 1번 인덱스값이 4인것은 nums의 숫자1이 4번째 인덱스에 있다는 것이다.
이 포지션 리스트에서 각 원소가 인접한 다음 원소보다 작으면 더 작은 값이 더 앞에 있는 것이므로 이동할 필요가 없다.
그렇게 리스트를 순회하면서 이동할 필요가 없는 수를 증가시키고

전체 어린이 수와의 차이를 출력한다. 

"""
import sys
n = int(sys.stdin.readline().rstrip("\n"))
nums = list(map(int, sys.stdin.readline().rstrip("\n").split()))
nums.insert(0,0)
positions=[0]*(n+1)
for i in range(1,len(nums)):
    positions[nums[i]] = i
count=1
max=-1
for i in range(1,len(nums)-1):
    if(positions[i] < positions[i+1]):
        count+=1
        if(count>max):
            max = count
    else:
        count=1

print(n-max)
