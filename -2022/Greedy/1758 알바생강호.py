# 손님을 8시가 될 때 까지, 문앞에 줄 세워 놓는다.
# 그리고 8시가 되는 순간 손님들은 모두 입구에서 커피를 하나씩 받고, 자리로 간다.
# 강호는 입구에서 커피를 하나씩 주는 역할을 한다.
# 손님들은 입구에 들어갈 때, 강호에게 팁을 준다.
# 손님들은 자기가 커피를 몇 번째 받는지에 따라 팁을 다른 액수로 강호에게 준다.
# 각 손님은 강호에게 원래 주려고 생각했던 돈 - (받은 등수 - 1) 만큼의 팁을 강호에게 준다.
# 만약, 위의 식으로 나온 값이 음수라면, 강호는 팁을 받을 수 없다.
# 예를 들어, 민호는 팁을 3원 주려고 했고, 재필이는 팁을 2원, 주현이가 팁을 1원 주려고 한 경우를 생각해보자.
# 민호, 재필, 주현이 순서대로 줄을 서있다면, 민호는 강호에게 3-(1-1) = 3원, 재필이는 2-(2-1) = 1원, 주현이는 1-(3-1) = -1원을 팁으로 주게 된다.
# 주현이는 음수이기 때문에, 강호에게 팁을 주지 않는다. 따라서, 강호는 팁을 3+1+0=4원을 받게 된다.
# 스타박스 앞에 있는 사람의 수 N과, 각 사람이 주려고 생각하는 팁이 주어질 때, 손님의 순서를 적절히 바꿨을 때,
# 강호가 받을 수 잇는 팁의 최댓값을 구하는 프로그램을 작성하시오.

"""
계산 결과가 음수가 되지 않는 선에서 처리하는 게 중요할 듯, 왜냐면 총 계산을 생각해보면 -되는 건 똑같으니까.. 그리고 -값은 인덱스 값으로 하면 되겠네
음.. 생각되는 케이스가 아래랑 같음

1. 올림차순 sort해서 최대한 챙기는 것
2. 내림차순 sort해서 버릴 것 버리고 값 가져가는 것

-> 1 2 5라고 생각해보자
Case1 : 1-0 2-1 5-2 = 5
Case2 : 5-0 2-1 1-2 = 6

-되는 값이랑 비교해서 해야 하나 아니면 그냥 Case2가 맡다고 단정지을 수 있나..?
일단은 Case2로 기릿
"""
import sys
N = int(sys.stdin.readline())
tip_list = []
for _ in range(N) :
    tip_list.append(int((sys.stdin.readline())))

tip_list.sort(reverse=True)

def circulate_tip(t) :
    tmp = t[1]-t[0]
    if tmp > 0 :
        return tmp
    else:
        return 0

print(sum(map(circulate_tip,enumerate(tip_list))))
"""
-> 정답은 맞았는데 이게 왜 수학적으로 옳은지 모르겠어.. 지금 찾아봤는데 안나와서 일단 찾으면 더 보강하자

"""
